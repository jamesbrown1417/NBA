---
title: "NBA Bets"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Get the current date and time
current_time <- Sys.time()

# Format the timestamp to be more aesthetic and human-readable
formatted_time <- format(current_time, "%A, %d %B %Y at %I:%M %p")

# Output the formatted timestamp
cat("Generated on:", formatted_time)
```

```{ojs}
viewof odds1 = Inputs.text({
  label: "Odds 1:",
  placeholder: "Enter odds...",
  value: "2.4" // Default value for demonstration
})

viewof stake1 = Inputs.text({
  label: "Stake 1:",
  placeholder: "Enter stake...",
  value: "100" // Default value for demonstration
})

viewof odds2 = Inputs.text({
  label: "Odds 2:",
  placeholder: "Enter odds...",
  value: "1.8" // Default value for demonstration
})

// Format numbers to two decimal places
formatNumber = (value) => parseFloat(value).toFixed(2)

// Format stakes as dollars
formatCurrency = (value) => `$${parseFloat(value).toFixed(2)}`

// Calculate the required stake for arbitrage
stake2 = {
  const o1 = parseFloat(odds1);
  const s1 = parseFloat(stake1);
  const o2 = parseFloat(odds2);
  if (!isNaN(o1) && !isNaN(s1) && !isNaN(o2)) {
    return (s1 * o1) / o2;
  } else {
    return "Please enter valid numerical values.";
  }
}

// Calculate arbitrage percentage (sum of reciprocals of odds minus 1)
arbitragePercentage = {
  const o1 = parseFloat(odds1);
  const o2 = parseFloat(odds2);
  if (!isNaN(o1) && !isNaN(o2)) {
    const arb = (1 / o1) + (1 / o2);
    return -100 * (1 - arb); // Percentage below 1
  } else {
    return "Please enter valid numerical values.";
  }
}

// Calculate total profit (if arbitrage exists)
totalProfit = {
  const o1 = parseFloat(odds1);
  const s1 = parseFloat(stake1);
  const s2 = stake2;
  if (!isNaN(o1) && !isNaN(s1) && typeof s2 === "number") {
    // Profit if Bet 1 wins
    const profit1 = (s1 * o1) - (s1 + s2);
    return profit1; // Both bets yield the same profit
  } else {
    return "Please enter valid numerical values.";
  }
}

// Output the results in an aesthetic format with left-justified columns
html`
  <div style="
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  ">
    <div style="display: flex; justify-content: space-between; gap: 20px;">
      <div style="flex: 1; text-align: left;">
        <h3 style="color: #34495e; text-align: left;">Odds</h3>
        <p><strong>Odds 1:</strong> ${formatNumber(odds1)}</p>
        <p><strong>Odds 2:</strong> ${formatNumber(odds2)}</p>
      </div>
      <div style="flex: 1; text-align: left;">
        <h3 style="color: #34495e; text-align: left;">Stakes</h3>
        <p><strong>Stake 1:</strong> ${formatCurrency(stake1)}</p>
        <p><strong>Stake 2:</strong> ${typeof stake2 === "number" ? formatCurrency(stake2) : stake2}</p>
      </div>
    </div>
    <hr style="border: none; border-top: 1px solid #ddd;">
    <h3 style="color: #3498db; text-align: center;">
      Arbitrage Percentage: ${typeof arbitragePercentage === "number" ? formatNumber(-arbitragePercentage) + "%" : arbitragePercentage}
    </h3>
    <h3 style="color: #27ae60; text-align: center;">
      Total Profit: ${typeof totalProfit === "number" ? formatCurrency(totalProfit) : totalProfit}
    </h3>
  </div>
`
```

```{r}
# Libraries
library(tidyverse)
library(DT)

# Read in files
all_arbs <- read_rds("../Data/all_arbs.rds")
all_middles <- read_rds("../Data/all_middles.rds")
tab_miss_by_one <- read_rds("../Data/tab_points_miss_by_one.rds")
```

:::::: panel-tabset
## Top-Down

::: panel-tabset
## All

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  mutate(margin = round(margin, 2))
```

## TAB

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("TAB") | under_agency %in% c("TAB")) |> 
  mutate(margin = round(margin, 2))
```

## Dabble

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("Dabble") | under_agency %in% c("Dabble")) |> 
  mutate(margin = round(margin, 2))
```

## BetRight

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("BetRight") | under_agency %in% c("BetRight")) |> 
  mutate(margin = round(margin, 2))
```

## Betr

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("Betr") | under_agency %in% c("Betr")) |> 
  mutate(margin = round(margin, 2))
```

## Neds

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("Neds") | under_agency %in% c("Neds")) |> 
  mutate(margin = round(margin, 2))
```

## Pointsbet

```{r}
#| column: page

  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("Pointsbet") | under_agency %in% c("Pointsbet")) |> 
  mutate(margin = round(margin, 2))
```

## TAB Miss-by-1 Points

```{r}
#| column: page

tab_miss_by_1_points_arbs <-
  tab_miss_by_one |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Sportsbet") | under_agency %in% c("Sportsbet")) |> 
  filter(over_agency %in% c("TAB") | under_agency %in% c("TAB")) |> 
  filter(line >= 8.5) |> 
  mutate(margin = round(margin, 2))

tab_miss_by_1_points_arbs
```
:::

## Arbs

::: panel-tabset
## All Arbs

```{r}
#| column: page

# Separate into sportsbet
  all_arbs |>
  filter(margin > 0) |> 
  filter(!over_agency %in% c("Unibet") & !under_agency %in% c("Unibet")) |> 
  mutate(margin = round(margin, 2))
```

## Unibet Arbs

```{r}
#| column: page

unibet_arbs <-
  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Unibet") | under_agency %in% c("Unibet")) |> 
  mutate(margin = round(margin, 2)) |> 
  arrange(match, desc(margin))

unibet_arbs
```

## Tab Miss-by-1 Points Arbs

```{r}
#| column: page

tab_miss_by_1_points_arbs <-
  tab_miss_by_one |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("TAB") | under_agency %in% c("TAB")) |> 
  filter(!over_agency %in% c("Neds", "Unibet") & !under_agency %in% c("Neds", "Unibet")) |> 
  mutate(margin = round(margin, 2))

tab_miss_by_1_points_arbs
```
:::

## Middles

```{r}
#| column: page

all_middles |> 
  mutate(margin = round(margin, 2))
```

## Builder Bets for multis

::: panel-tabset
## Dabble

```{r}
#| results: asis

# Get cases where Dabble has best odds in the market
all_procesed_odds <-
list.files("../Data/processed_odds", full.names = TRUE) |> 
  map(~ {
    df <- read_rds(.x)
    if (!"outcome_name_under" %in% names(df)) {
      df$outcome_name_under <- NA_character_  # Add column if missing
    } else {
      df <- df |> mutate(outcome_name_under = as.character(outcome_name_under))
    }
    df
  }) |> 
  bind_rows()

all_procesed_odds <-
  all_procesed_odds |>
  group_by(match, market_name, player_name, line) |>
  # slice_head(n = 1) |>
  ungroup() |>
  filter(agency == "Dabble") |> 
  filter(over_price <= 1.5) |> 
  select(
    match,
    market_name,
    player_name,
    line,
    over_price,
    agency,
    player_team,
    diff_over_2024_25,
    diff_over_last_10,
    diff_over_last_20
  ) |> 
  arrange(match, desc(diff_over_last_20)) |> 
  filter(diff_over_last_20 >= 0)

# Distinct Matches
all_matches <- 
  all_procesed_odds |> 
  distinct(match) |> 
    pull(match)

# Function to filter by match
filter_by_match <- function(m, df) {
  df |> 
    filter(match == m)
}

# Get a list where each match is the name of the filtered DF
filtered_list_alt <- map(all_matches, filter_by_match, df = all_procesed_odds) |> 
  set_names(all_matches) |> 
    # keep if there are more than 1 row
    keep(~ nrow(.x) > 1) |> 
    map(~ datatable(.x))

# Use qreport to make tabset
qreport::maketabs(filtered_list_alt, wide = TRUE)
```

## TAB

```{r}
#| results: asis

# Get cases where Dabble has best odds in the market
all_procesed_odds <-
list.files("../Data/processed_odds", full.names = TRUE) |> 
  map(~ {
    df <- read_rds(.x)
    if (!"outcome_name_under" %in% names(df)) {
      df$outcome_name_under <- NA_character_  # Add column if missing
    } else {
      df <- df |> mutate(outcome_name_under = as.character(outcome_name_under))
    }
    df
  }) |> 
  bind_rows()

all_procesed_odds <-
  all_procesed_odds |>
  group_by(match, market_name, player_name, line) |>
  # slice_head(n = 1) |>
  ungroup() |>
  filter(agency == "TAB") |> 
  filter(over_price <= 1.5) |> 
  select(
    match,
    market_name,
    player_name,
    line,
    over_price,
    agency,
    player_team,
    diff_over_2024_25,
    diff_over_last_10,
    diff_over_last_20
  ) |> 
  arrange(match, desc(diff_over_last_20)) |> 
  filter(diff_over_last_20 >= 0)

# Distinct Matches
all_matches <- 
  all_procesed_odds |> 
  distinct(match) |> 
    pull(match)

# Function to filter by match
filter_by_match <- function(m, df) {
  df |> 
    filter(match == m)
}

# Get a list where each match is the name of the filtered DF
filtered_list_alt <- map(all_matches, filter_by_match, df = all_procesed_odds) |> 
  set_names(all_matches) |> 
    # keep if there are more than 1 row
    keep(~ nrow(.x) > 1) |> 
    map(~ datatable(.x))

# Use qreport to make tabset
qreport::maketabs(filtered_list_alt, wide = TRUE)
```
:::
::::::
